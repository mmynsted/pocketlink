#!/bin/bash

configFile="${HOME}/.pocketlink"
pocketlinkSrcFlagFile='.pocketlink-src-dir-flag'
pocketlinkReadme='pocketlink-readme.txt'

#root pocket directory
pocket=${HOME}/pocket

#location to be used for temporary space
tmpPath=/tmp

function getHelp 
{ 
cat 1>&2 <<EOF                                                                                                                                                                                                                                                                  

POCKETLINK Help                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                
Background:                                                                                                                                                                                                                                                                     
Pocketlink was designed to address a particular problem.  The problem was that I wanted to manage multiple 
shell scripts and applications in separate git repositories but have the deployment files live in the same 
destination directory or location in my path.  I also wanted the deployment files to reflect a particular commit.  
This would permit a me to separate production and test deployments in a way that would not otherwise be possible.  
I wanted to be able to automate deployment by running a simple shell command.  The final piece of the pie was 
that I wanted to be able to look somewhere and see from what repository a deployment originated.                                                                                                                                                                      
                                                                                                                                                                                                                                                                                
Use:                                                                                                                                                                                                                                                                            
Execute pocketlink in the top of the git repository you wish to export.  
Provide pocketlink with the fully qualified destination directory as the '-d ' parameter.                                                                                                              
                                                                                                                                                                                                                                                                                
Example:                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                
$pocketlink -d /usr/myuser/bin                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                
Detail:                                                                                                                                                                                                                                                                         
Pocketlink is used to export all of the files from an active branch of a git repository to a source directory 
under the pocket tree.  The pocket tree is a directory tree that contains a directory for each exported 
git repository and defaults to '~/pocket'.  One may examine the pocket directory to understand the alignment 
between destination files and and source repositories.                                                                                                                                                                       
                                                                                                                                                                                                                                                                                
The source directory is used as a source for pocketlink files.  This source directory is git repository directory 
with the branch we wish to deploy being the active branch.  This directory should be the working directory when 
pocketlink is executed.  Recall that the source directory is a git repository, thus to prevent a file from being 
exported, create a .gitattributes file using the 'export-ignore' keyword.                                                                                                                                    
                                                                                                                                                                                                                                                                                
Example .gitattributes:                                                                                                                                                                                                                                                         
NoExportMe.txt   export-ignore                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                
The destination directory is the deployment destination.  It will be populated with symbolic links back to a pocketlink directory.  
It is possible, of course to have the same destination directory be used for more than one pocketlink.  
Think of an example where two different shell scripts are deployed to the same bin directory, but are managed by two different 
git repositories and thus two different pocklinks.                                                                                                                                   
                                                                                                                                                                                                                                                                                
A pocketlink directory is a directory located under the pocket directory.  A pocketlink directory will be created in alignment 
with a git repository, such that a directory will exist for each git repository used as a source.  
It is possible for more than one pocketlink directory to use the same deployment directory.  
Pocketlink creates a file is in each pocketlink directory called 'pocketlink-readme.txt'.  
This file simply documents the source repository and deployment destination defined for the given pocketlink.                        
                                                                                                                                                                                                                                                                                
One thing that pocketlink will not do is a sanity check to ensure you do not deploy files of the same name to the same path.                                                                                                                                                    
                                                                                                                                                                                                                                                                                
Example:                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                
git repository   source              destination   deployment                                                                                                                                                                                                                   
--------------   ----------------    ------------  -------------                                                                                                                                                                                                                
gitrepA          ~/pocket/gitrepA    ~/bin         ~/bin/coolScript                                                                                                                                                                                                             
gitrepB          ~/pocket/gitrepB    ~/bin         ~/bin/scriptB                                                                                                                                                                                                                
gitrepC          ~/pocket/gitrepC    ~/bin         ~/bin/coolScript                                                                                                                                                                                                             
gitrepD          ~/pocket/gitrepD    ~/bin         ~bin/scriptD                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                
In the above example gitrepA and gitrepC have the same deployment file name 'coolScript' and are using the same destination directory.  
This type of collision must be avoided.  Pocketlink will not prevent nor check for such a collision. 
It is up to you the user to prevent these collisions.  Just as one would need to prevent path collisions.                                                                                                                                                                                                          
Each time that pocklink is run from the same source directory with the same parameters, 
it will first attempt remove the old deployment so it may be replaced with the new deployment.  
This should make it simple refresh deployments based on new commits.                    
                                                                                                                                                                                                                                                                                
Use at your own risk, and good luck.  :-)                 
EOF
}

function err()
{
	echo "\nError: "${1} 1>&2;
}


#source the config
if [ -e $configFile ] 
then
	source $configFile 
else
	echo "$configFile not found, using defaults">&2
fi

#echo pocket=${pocket}

wrkDir=`pwd`
srcDir=${pocket}/${wrkDir##*/}

#check source directory when setting
function prepSrcDir()
{ 
	if [[ ${1} =~ ^/ ]] 
	then 
		srcDir=${1}
	else
		err "Source directory, defined as \"$srcDir\" must be explicit, i.e. must start with '/'.  Can not continue"
		exit 1
	fi
	if [ -d $srcDir ]
	then
		echo "Cleaning existing links"
		unwindSymlinks

		echo removing old source directory
		if [ -e $srcDir/$pocketlinkSrcFlagFile ]
		then
			if [[ "$srcDir" == `head -n 1 ${srcDir}/${pocketlinkSrcFlagFile}` ]] 
			then 
				rm -rf "$srcDir"
			else
				err "The flag file, \"${srcDir}/${pocketlinkSrcFlagFile}\", was found in \"$srcDir\" but did not contain the expected content.  Pocketlink will exit."
				exit 3
			fi
		else
			err "The flag file, \"$pocketlinkSrcFlagFile\", was not found.  The source directory, \"$srcDir\", may be corrupt.  Pocketlink will exit."
			exit 3
		fi
	else
		if [ -e $srcDir ]
		then
			err "The source directory, \"$srcDir\", exists as a file or a symbolic link.  "\
			"This was not created by pocketlink and is unexpected.  Pocketlink will terminate."
			exit 1
		fi
	fi

	#Create a new srcDir
	#add the flag and readme files
	mkdir -v $srcDir

	echo creating ${srcDir}/${pocketlinkSrcFlagFile}
	echo $srcDir > ${srcDir}/${pocketlinkSrcFlagFile}

	echo creating ${srcDir}/${pocketlinkReadme}
	cat > ${srcDir}/${pocketlinkReadme}<<EOF
`getPocketDirReadme`
EOF


}

#check dest directory when setting
function isValidDstDir()
{ 
	if [[ $1 =~ ^/ ]] 
	then 
		dstDir=$1 
	else
		err "The directory defined as the destination directory, \"$dstDir\", must be explicit, i.e. must start with '/' and should be an actual directory rather than a symbolic link.  Can not continue."
		getHelp
		exit 1
	fi
	if [ ! -d $dstDir ]
	then 
		err "The destination directory, \"$dstDir\", is either not-found or is a symbolic link or is otherwise unsafe."
		getHelp
		exit 1
	fi
}


# getTempDir() get a temporary directoy so that git-archive-all can have a 
# place for the output tar file.  As of this time it can not 
# write the tar to a pipe/stdout, and the file name is used 
# to determine some of the content of the tar.
function getTempDir()
{
	local tempTemplate=${tmpPath}/`basename $0`'-XXXXXXX'
	local tempDir=`mktemp -d -q ${tempTemplate}`
	if [ $? -ne 0 ]; then
		err "$0: Can not create temporary directory; unable to continue. " >&2
		exit 1
	fi
	echo ${tempDir}
}

# unwindSymlinks() clean up the symlinks pointing to a pocket directory
# Attempt to remove any symlinks pointing to a pocket directory
function unwindSymlinks()
{
	#find all of the symlinks in destination directory
	local links=(`find ${dstDir} -type l -print 2>/dev/null -maxdepth 1`)

	#remove the symlinks that point to the source directory ($srcDir) from the destination directory ($dstDir)
	for l in "${links[@]}"
	do
		local symlinkDest=`readlink $l`
		#echo srcDir=$srcDir l=$l symlinkDest=$symlinkDest
		if [[ $symlinkDest =~ "$srcDir"/.* ]]; then
			echo "Removing symlink '$l'."
			#need to add error handling here
			unlink $l
		else
			echo "Ignoring symlink '$l'."
		fi
	done
}

#get conent for a pocketDirReadme file
function getPocketDirReadme()
{
cat <<EOF
This directory contains files exported from a git repository here '${wrkDir}'.
Symlinks are created here, '${dstDir}', that point back to files here '${srcDir}'.
EOF
}

#it is VERY important that the symbolic links have the full path
function createSymbolicLinks()
{
	#find from srcDir only first level entries, do not include the srcDir and exclude the flag file
	# then create a symlink to each find, in the dstDir
	find $srcDir -mindepth 1 -maxdepth 1 \
	\( ! -regex '.*'${pocketlinkSrcFlagFile} \) \
	\( ! -regex '.*'${pocketlinkReadme} \) \
	-exec ln -sv '{}' $dstDir \;	
}

function isReady()
{
cat <<EOF
You have selected to export from the currently active branch in the git repository located here '${wrkDir}'.
The pocketlink directory for this export will be here '${srcDir}'.  Symlinks back to the files in '${srcDir}' 
will be made here '${dstDir}'.
EOF
	read -n1 -p "Are you sure that you would like to continue? [y/n] " wantContinue;
	echo
	case $wantContinue in  
		y|Y) echo Yes ;; 
		*) echo No; exit;; 
	esac
}

while getopts ":s:d:" Option
do
	case $Option in
#		s ) setSrcDir $OPTARG;; 
		d ) dstDir=$OPTARG;;
	esac
done 

shift $(($OPTIND - 1))

isValidDstDir $dstDir 
#getPocketDirReadme
isReady

#prepare the source directory for new files (remove old files and links)
prepSrcDir $srcDir

#get the temp directory
tempDir=$(getTempDir)

#export/archive the current branch of the git repository from the current working directory
gArchive=$tempDir/${wrkDir##*/}.tar
git-archive-all $gArchive 
tar -C $pocket -xvf $gArchive
rm -v $gArchive
rmdir ${tempDir}
createSymbolicLinks

echo Done

